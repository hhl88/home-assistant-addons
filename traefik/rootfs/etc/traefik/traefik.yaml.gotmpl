# Traefik static configuration
# DO NOT MODIFY -- Managed by Home Assistant Traefik add-on

{{- $options := (ds "options") }}

global:
  checkNewVersion: false
  sendAnonymousUsage: false

entryPoints:
  tcp:
{{- if has $options "tcp_port" }}
    address: ":{{ $options.tcp_port }}"
{{- else }}
    address: ":53"
{{- end }}
{{- if has $options "forwarded_headers_insecure" }}
    forwardedHeaders:
      insecure: {{ $options.forwarded_headers_insecure }}
{{- end }}
  udp:
{{- if has $options "udp_port" }}
    address: ":{{ $options.udp_port }}/udp"
{{- else }}
    address: ":53/udp"
{{- end }}
  web:
{{- if has $options "http_port" }}
    address: ":{{ $options.http_port }}"
{{- else }}
    address: ":80"
{{- end }}   
  web-secure:
{{- if has $options "https_port" }}
    address: ":{{ $options.https_port }}"
{{- else }}
    address: ":443"
{{- end }}   
{{- if has $options "forwarded_headers_insecure" }}
    forwardedHeaders:
      insecure: {{ $options.forwarded_headers_insecure }}
{{- end }}

api:
  dashboard: true
  insecure: true

{{ if and (has $options "letsencrypt") ($options.letsencrypt.enabled) -}}
certificatesResolvers:
  le:
    acme:
      email: "{{ $options.letsencrypt.email }}"
      storage: "/ssl/traefik/le/acme.json"
  {{- if or (not (has $options.letsencrypt "challenge_type")) (eq $options.letsencrypt.challenge_type "tlsChallenge") }}
      tlsChallenge: {}
  {{- else if eq $options.letsencrypt.challenge_type "httpChallenge" }}
      httpChallenge:
        entryPoint: web
  {{- else if eq $options.letsencrypt.challenge_type "dnsChallenge" }}
      dnsChallenge:
        provider: {{ $options.letsencrypt.provider }}
    {{- if has $options.letsencrypt "delayBeforeCheck" }}
        delayBeforeCheck: {{ $options.letsencrypt.delayBeforeCheck }}
    {{- end }}
      {{- if and (has $options.letsencrypt "resolvers") (gt (len $options.letsencrypt.resolvers) 0) }}
        resolvers:
        {{- range $options.letsencrypt.resolvers }}
          - "{{ . }}"
        {{- end }}
      {{- end }}
  {{- end }}
{{- end }}

providers:
  file:
    directory: "{{ $options.dynamic_configuration_path }}"

{{ if and (has $options "access_logs") $options.access_logs -}}
accessLog: {}
{{- end }}

log:
  level: {{ strings.ToUpper $options.log_level }}
